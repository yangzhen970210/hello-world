{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.2 二分查找 其输入一个有序的列表"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def binary_search(lists, item):\n",
    "    low = 0\n",
    "    high = len(lists) - 1\n",
    "    while low < high:\n",
    "        mid = int((low + high)/2)\n",
    "        guess = lists[mid]\n",
    "        if guess == item:\n",
    "            return mid\n",
    "        elif guess > item:\n",
    "            high = mid - 1\n",
    "        else:\n",
    "            low = mid + 1\n",
    "    return 'not found'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "666"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lit = list(range(100000))\n",
    "binary_search(lit, 666)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'not found'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary_search(lit, 666666)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 查找对数时间      and 常量时间和线性时间"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>数组</th>\n",
       "      <th>链表</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>读取</td>\n",
       "      <td>O(1)</td>\n",
       "      <td>O(N)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>插入</td>\n",
       "      <td>O(N)</td>\n",
       "      <td>O(1)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>删除</td>\n",
       "      <td>O(N)</td>\n",
       "      <td>O(1)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      数组    链表\n",
       "读取  O(1)  O(N)\n",
       "插入  O(N)  O(1)\n",
       "删除  O(N)  O(1)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2.2 数组和链表\n",
    "import pandas as pd \n",
    "df = pd.DataFrame({'数组':['O(1)', 'O(N)', 'O(N)'],'链表':['O(N)', 'O(1)', 'O(1)']}, index = ['读取', '插入', '删除'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2.3 选择排序  O(n*n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def choice_sort(arr):\n",
    "    newarr = []\n",
    "    \n",
    "    while len(arr) >= 1:\n",
    "        lit = arr[0]\n",
    "        litindex = 0\n",
    "        for x in range(1,len(arr)):\n",
    "            if arr[x] < lit:\n",
    "                lit = arr[x]\n",
    "                litindex = x\n",
    "        newarr.append(arr.pop(litindex))\n",
    "    return newarr\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-5, 1, 2, 3, 6, 11, 12, 22, 32, 77]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "choice_sort([1,3,-5,2,22,11,6,32,77,12])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def findsmallest(arr):\n",
    "    smallest = arr[0]\n",
    "    smallest_index = 0\n",
    "    for i in range(1, len(arr)):\n",
    "        if arr[i] < smallest:\n",
    "            smallest = arr[i]\n",
    "            smallest_index = i\n",
    "    return smallest_index\n",
    "\n",
    "def selectionsort(arr):\n",
    "    newarr = []\n",
    "    for x in range(len(arr)):\n",
    "        smallest = findsmallest(arr)\n",
    "        newarr.append(arr.pop(smallest))\n",
    "    return newarr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-5, 1, 2, 3, 6, 11, 12, 22, 32, 77]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selectionsort([1,3,-5,2,22,11,6,32,77,12])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = \"\"\"\n",
    "❑ 计算机内存犹如一大堆抽屉。\n",
    "❑ 需要存储多个元素时，可使用数组或链表。\n",
    "❑ 数组的元素都在一起。\n",
    "❑ 链表的元素是分开的，其中每个元素都存储了下一个元素的地址。\n",
    "❑ 数组的读取速度很快。❑ 链表的插入和删除速度很快。\n",
    "❑ 在同一个数组中，所有元素的类型都必须相同（都为int、double等）。\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 第三章 递归\n",
    "# 自己调用自己\n",
    "# 基线条件和递归条件"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = \"\"\"\n",
    "我怀着激动的心情编写本章，因为它介绍的是递归——一种优雅的问题解决方法。\n",
    "递归是我最喜欢的主题之一，它将人分成三个截然不同的阵营：恨它的、爱它的以及恨了几年后又爱上它的。\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3.3 栈  后进先出   递归栈"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = \"\"\"\n",
    "❑ 递归指的是调用自己的函数。\n",
    "❑ 每个递归函数都有两个条件：基线条件和递归条件。\n",
    "❑ 栈有两种操作：压入和弹出。\n",
    "❑ 所有函数调用都进入调用栈。\n",
    "❑ 调用栈可能很长，这将占用大量的内存。\"\"\"\n",
    "\n",
    "d = \"\"\"\n",
    "使用栈虽然很方便，但是也要付出代价：存储详尽的信息可能占用大量的内存。\n",
    "每个函数调用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息。\n",
    "在这种情况下，你有两种选择。\n",
    "❑ 重新编写代码，转而使用循环。\n",
    "❑ 使用尾递归。这是一个高级递归主题，不在本书的讨论范围内。另外，并非所有的语言都支持尾递归。\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 第四章 快速排序"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def digui(arr):\n",
    "    if len(arr) > 1:\n",
    "        arr0 = arr[0]\n",
    "        arr1 = []\n",
    "        site = 0\n",
    "        for x in range(1, len(arr)):\n",
    "            if arr[x] < arr0:\n",
    "                site = x\n",
    "        arr1.append(arr.pop(site))\n",
    "        return arr1 + (digui(arr))\n",
    "    else:\n",
    "        return arr     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-5, 1, 2, 3, 12, 6, 11, 22, 32, 77]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "digui([1,3,-5,2,22,11,6,32,77,12])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
